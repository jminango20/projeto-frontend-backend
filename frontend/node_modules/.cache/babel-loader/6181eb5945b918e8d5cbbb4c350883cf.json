{"ast":null,"code":"var _jsxFileName = \"/home/juan/Workspaces/ws-devsuperior/projeto-sds3/frontend/src/components/DonuChart/index.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport Chart from 'react-apexcharts';\nimport { BASE_URL } from 'utils/requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DonuChart = () => {\n  _s();\n\n  const [charData, setCharData] = useState({\n    labels: [],\n    series: []\n  }); //let charData : ChartData = {labels: [], series: []};\n\n  useEffect(() => {\n    axios.get(`${BASE_URL}/sales/amount-by-seller`).then(response => {\n      const data = response.data;\n      const myLabels = data.map(x => x.sellerName);\n      const mySeries = data.map(x => x.sum);\n      setCharData({\n        labels: myLabels,\n        series: mySeries\n      });\n    });\n  }, []); //const mockData = {\n  //    series: [477138, 499928, 444867, 220426, 473088],\n  //    labels: ['Anakin', 'Barry Allen', 'Kal-El', 'Logan', 'Padmé']\n  //}\n\n  const options = {\n    legend: {\n      show: true\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Chart, {\n    options: { ...options,\n      labels: charData.labels\n    },\n    series: charData.series,\n    type: \"donut\",\n    height: \"240\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DonuChart, \"uiKlPFJ1bvSObjTLQQDlAoVcrsM=\");\n\n_c = DonuChart;\nexport default DonuChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"DonuChart\");","map":{"version":3,"sources":["/home/juan/Workspaces/ws-devsuperior/projeto-sds3/frontend/src/components/DonuChart/index.tsx"],"names":["axios","useEffect","useState","Chart","BASE_URL","DonuChart","charData","setCharData","labels","series","get","then","response","data","myLabels","map","x","sellerName","mySeries","sum","options","legend","show"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,SAASC,QAAT,QAAyB,gBAAzB;;;AAOA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAEpB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAY;AAACM,IAAAA,MAAM,EAAE,EAAT;AAAaC,IAAAA,MAAM,EAAE;AAArB,GAAZ,CAAxC,CAFoB,CAGpB;;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACZD,IAAAA,KAAK,CAACU,GAAN,CAAW,GAAEN,QAAS,yBAAtB,EACCO,IADD,CACMC,QAAQ,IAAI;AACd,YAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAtB;AACA,YAAMC,QAAQ,GAAGD,IAAI,CAACE,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACC,UAAhB,CAAjB;AACA,YAAMC,QAAQ,GAAGL,IAAI,CAACE,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACG,GAAhB,CAAjB;AAEAZ,MAAAA,WAAW,CAAC;AAACC,QAAAA,MAAM,EAAEM,QAAT;AAAmBL,QAAAA,MAAM,EAAES;AAA3B,OAAD,CAAX;AACH,KAPD;AAQH,GATQ,EASN,EATM,CAAT,CALoB,CAkBpB;AACA;AACA;AACA;;AAEA,QAAME,OAAO,GAAG;AACZC,IAAAA,MAAM,EAAE;AACJC,MAAAA,IAAI,EAAE;AADF;AADI,GAAhB;AAMA,sBACI,QAAC,KAAD;AACI,IAAA,OAAO,EAAE,EAAC,GAAGF,OAAJ;AAAaZ,MAAAA,MAAM,EAAEF,QAAQ,CAACE;AAA9B,KADb;AAEI,IAAA,MAAM,EAAEF,QAAQ,CAACG,MAFrB;AAGI,IAAA,IAAI,EAAC,OAHT;AAII,IAAA,MAAM,EAAC;AAJX;AAAA;AAAA;AAAA;AAAA,UADJ;AASD,CAtCH;;GAAMJ,S;;KAAAA,S;AAwCJ,eAAeA,SAAf","sourcesContent":["import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport Chart from 'react-apexcharts';\nimport { SaleSum } from 'types/sale';\nimport { BASE_URL } from 'utils/requests';\n\ntype ChartData = {\n    labels: string[];\n    series: number[];\n}\n\nconst DonuChart = () => {\n\n    const [charData, setCharData] = useState<ChartData>({labels: [], series: []})\n    //let charData : ChartData = {labels: [], series: []};\n\n    useEffect(() => {\n        axios.get(`${BASE_URL}/sales/amount-by-seller`)\n        .then(response => {\n            const data = response.data as SaleSum[];\n            const myLabels = data.map(x => x.sellerName);\n            const mySeries = data.map(x => x.sum);\n\n            setCharData({labels: myLabels, series: mySeries});\n        });\n    }, [])\n\n\n\n    //const mockData = {\n    //    series: [477138, 499928, 444867, 220426, 473088],\n    //    labels: ['Anakin', 'Barry Allen', 'Kal-El', 'Logan', 'Padmé']\n    //}\n    \n    const options = {\n        legend: {\n            show: true\n        }\n    }\n    \n    return (\n        <Chart \n            options={{...options, labels: charData.labels}}\n            series={charData.series}\n            type=\"donut\"\n            height=\"240\"\n        />\n\n    );\n  }\n  \n  export default DonuChart;"]},"metadata":{},"sourceType":"module"}